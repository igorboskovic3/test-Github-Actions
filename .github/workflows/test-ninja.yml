name: Test Ninja and Python

on: push

env:
  BUILD_TYPE: Release

jobs:
  python_bindings:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_failure }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        name: [Ubuntu, macOS, Windows_py37, Windows_py38, Windows_py39]
        include:
        - name: Ubuntu
          os: ubuntu-18.04
          python-version: 3.8
          allow_failure: false
        - name: macOS
          os: macos-10.15
          python-version: 3.8
          allow_failure: false
          MACOSX_DEPLOYMENT_TARGET: 10.14
          SDKROOT: /Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
          DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
        - name: Windows_py37
          os: windows-2019
          python-version: 3.7
          allow_failure: false
        - name: Windows_py38
          os: windows-2019
          python-version: 3.8
          allow_failure: false
        - name: Windows_py39
          os: windows-2019
          python-version: 3.9
          allow_failure: true  # Possible this fails, don't care yet

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install System dependencies
      shell: bash
      run: |
        set -x

        echo "${{ steps.setup-python.outputs.python-version }}"
        echo "${{ steps.setup-python.outputs.* }}"

        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "Using Apt to install ninja"
          sudo apt update
          sudo apt install ninja-build

        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "Setting up MACOSX_DEPLOYMENT_TARGET and SDKROOT"
          echo MACOSX_DEPLOYMENT_TARGET=${{ matrix.MACOSX_DEPLOYMENT_TARGET }} >> $GITHUB_ENV
          echo SDKROOT=${{ matrix.SDKROOT }} >> $GITHUB_ENV
          echo DEVELOPER_DIR=${{ matrix.DEVELOPER_DIR }} >> $GITHUB_ENV
          # The MACOSX_DEPLOYMENT_TARGET environment variable sets the default value for the CMAKE_OSX_DEPLOYMENT_TARGET variable.
          # echo CMAKE_MACOSX_DEPLOYMENT_TARGET='-DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET' >> $GITHUB_ENV
          echo "Using brew to install ninja"
          brew install ninja
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "Using chocolatey to install ninja"
          choco install ninja

          echo "here is the list of installed MSBuild"
          cmd /c "vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath"

          # C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
          MSVC_DIR=$(cmd.exe /c "vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath -latest")
          echo "Latest is: $MSVC_DIR"
          echo "MSVC_DIR=$MSVC_DIR" >> $GITHUB_ENV
          # add folder containing vcvarsall.bat
          echo "$MSVC_DIR\VC\Auxiliary\Build" >> $GITHUB_PATH
          ls "$MSVC_DIR"
          ls "$MSVC_DIR\VC" || true
          ls "$MSVC_DIR\VC\Auxiliary" || true
          ls "$MSVC_DIR\VC\Auxiliary\Build" || true

        fi;

    - name: Create Build Directory
      run: cmake -E make_directory ./build/

    - name: Configure CMake (Windows)
      working-directory: ./build
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        call vcvarsall.bat x64
        cmake -G Ninja -DPython_ROOT_DIR="${{ runner.tool_cache }}/Python/${{ steps.setup-python.outputs.python-version }}/x64/" -DCMAKE_BUILD_TYPE=Release ../

    - name: Configure CMake (Unix)
      working-directory: ./build
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cmake -G Ninja -DPython_ROOT_DIR="${{ runner.tool_cache }}/Python/${{ steps.setup-python.outputs.python-version }}/x64/" -DCMAKE_BUILD_TYPE=Release ../

    - name: Build
      working-directory: ./build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run:  |
        ninja
